<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta charset="UTF-8" />
		<script src="https://cdn.jsdelivr.net/npm/zlibjs@0.3.1/bin/unzip.min.js"></script>
		<script src="https://toyotamakenkyusyo.github.io/busmapjs/b1/busmap.js"></script>
		<title>豐多摩研究所 GTFSのGeoJSON変換ツール</title>
	</head>
	<body>
		<h1>豐多摩研究所 GTFSのGeoJSON変換ツール</h1>
		<p>豐多摩研究所 トップページ <a href="https://ss1.xrea.com/toyotama.g1.xrea.com/index.xhtml">https://ss1.xrea.com/toyotama.g1.xrea.com/index.xhtml</a></p>
		<p>GitHub busmapjs <a href="https://github.com/toyotamakenkyusyo/busmapjs">https://github.com/toyotamakenkyusyo/busmapjs</a></p>
		<div>GTFSを読み込むと、経路の線をGeoJSONにして出力します。</div>
		<div><input type="radio" name="radio_shapes" value="shapes" checked="checked" />：shapes.txtがあれば使う<br /><input type="radio" name="radio_shapes" value="parent_station" />：shapes.txtを使わない（stops.txtにparent_stationがあれば使う）<br /><input type="radio" name="radio_shapes" value="stops" />：shapes.txtを使わない（stops.txtのparent_stationを使わない、stop_idを<input type="text" id="separate" value="" />で区切って最初の部分で束ねる（区切らない場合は空欄））</div>
		<div>元にするGTFSを読み込み：<input type="file" id="input_gtfs" accept="application/zip" /></div>
		<script>
		//<![CDATA[


document.getElementById("input_gtfs").onchange = f_read_gtfs;
async function f_read_gtfs(a) {
	const c_array_buffer = await busmapjs.convert_file_to_array_buffer(a.target.files[0]);
	const c_Uint8Array = new Uint8Array(c_array_buffer);
	const c_text_files = busmapjs.convert_zip_to_text_files(c_Uint8Array);
	const c_gtfs = {};
	for (const c_filename in c_text_files) {
		try {
			c_gtfs[c_filename.replace(".txt", "")] = busmapjs.convert_csv_to_json(c_text_files[c_filename]);
		} catch (e) {
			console.log(e);
			c_gtfs[c_filename.replace(".txt", "")] = [];
		}
	}
	busmapjs.number_lat_lon_sequence_of_gtfs(c_gtfs); // 緯度経度と順番を数値型に変換
	
	
	if (document.getElementsByName("radio_shapes").item(1).checked) {
		c_gtfs["shapes"] = [];
		const c_parent_station_index = {};
		for (let i1 = 0; i1 < c_gtfs["stops"].length; i1++) {
			if (c_gtfs["stops"][i1]["location_type"] === "1") {
				c_parent_station_index[c_gtfs["stops"][i1]["stop_id"]] = c_gtfs["stops"][i1];
			}
		}
		for (let i1 = 0; i1 < c_gtfs["stops"].length; i1++) {
			if (c_gtfs["stops"][i1]["location_type"] === "0") {
				if (c_gtfs["stops"][i1]["parent_station"] !== undefined && c_gtfs["stops"][i1]["parent_station"] !== null && c_gtfs["stops"][i1]["parent_station"] !== "") {
					c_gtfs["stops"][i1]["stop_lat"] = c_parent_station_index[c_gtfs["stops"][i1]["parent_station"]]["stop_lat"];
					c_gtfs["stops"][i1]["stop_lon"] = c_parent_station_index[c_gtfs["stops"][i1]["parent_station"]]["stop_lon"];
				}
			}
		}
	} else if (document.getElementsByName("radio_shapes").item(2).checked) {
		c_gtfs["shapes"] = [];
		const c_separate = document.getElementById("separate").value;
		if (c_separate !== "") {
			const c_parent_index = {};
			for (let i1 = 0; i1 < c_gtfs["stops"].length; i1++) {
				if (c_gtfs["stops"][i1]["location_type"] === "0") {
					const c_parent_id = c_gtfs["stops"][i1]["stop_id"].split(c_separate)[0];
					if (c_parent_index[c_parent_id] === undefined) {
						c_parent_index[c_parent_id] = {"stop_lon": 0, "stop_lat": 0, "count": 0};
					}
					c_parent_index[c_parent_id]["stop_lon"] += c_gtfs["stops"][i1]["stop_lon"];
					c_parent_index[c_parent_id]["stop_lat"] += c_gtfs["stops"][i1]["stop_lat"];
					c_parent_index[c_parent_id]["count"] += 1;
				}
			}
			for (const c_parent_id in c_parent_index) {
				c_parent_index[c_parent_id]["stop_lon"] = c_parent_index[c_parent_id]["stop_lon"] / c_parent_index[c_parent_id]["count"];
				c_parent_index[c_parent_id]["stop_lat"] = c_parent_index[c_parent_id]["stop_lat"] / c_parent_index[c_parent_id]["count"];
			}
			for (let i1 = 0; i1 < c_gtfs["stops"].length; i1++) {
				if (c_gtfs["stops"][i1]["location_type"] === "0") {
					const c_parent_id = c_gtfs["stops"][i1]["stop_id"].split(c_separate)[0];
					c_gtfs["stops"][i1]["stop_lon"] = c_parent_index[c_parent_id]["stop_lon"];
					c_gtfs["stops"][i1]["stop_lat"] = c_parent_index[c_parent_id]["stop_lat"];
				}
			}
		}
	}
	
	busmapjs.add_undefined_shapes(c_gtfs); // shapesがない場合に作る
	
	
	// pickup_typeとdrop_off_type
	for (let i1 = 0; i1 < c_gtfs["stop_times"].length; i1++) {
		if (c_gtfs["stop_times"][i1]["pickup_type"] === undefined) {
			c_gtfs["stop_times"][i1]["pickup_type"] = "";
		}
		if (c_gtfs["stop_times"][i1]["drop_off_type"] === undefined) {
			c_gtfs["stop_times"][i1]["drop_off_type"] = "";
		}
	}
	
	// routes.txt関連
	const c_route_field_names = ["route_id", "agency_id", "route_short_name", "route_long_name", "route_desc", "route_type", "route_url", "route_color", "route_text_color", "route_sort_order", "continuous_pickup", "continuous_drop_off", "jp_parent_route_id"];
	for (let i1 = 0; i1 < c_gtfs["routes"].length; i1++) {
		for (let i2 = 0; i2 < c_route_field_names.length; i2++) {
			if (c_gtfs["routes"][i1][c_route_field_names[i2]] === undefined) {
				c_gtfs["routes"][i1][c_route_field_names[i2]] = "";
			}
		}
		c_gtfs["routes"][i1]["route_sort_order"] = Number(c_gtfs["routes"][i1]["route_sort_order"]);
	}
	
	const c_route_index = {};
	for (let i1 = 0; i1 < c_gtfs["routes"].length; i1++) {
		c_route_index[c_gtfs["routes"][i1]["route_id"]] = c_gtfs["routes"][i1];
	}
	
	// calendar.txt
	const c_service_index = {};
	if (c_gtfs["calendar"] !== undefined) {
		for (i1 = 0; i1 < c_gtfs["calendar"].length; i1++) {
			c_service_index[c_gtfs["calendar"][i1]["service_id"]] = c_gtfs["calendar"][i1];
		}
	}
	
	// tripの整理
	const c_trip_index = {};
	for (let i1 = 0; i1 < c_gtfs["trips"].length; i1++) {
		c_trip_index[c_gtfs["trips"][i1]["trip_id"]] = c_gtfs["trips"][i1];
		c_trip_index[c_gtfs["trips"][i1]["trip_id"]]["stop_times"] = [];
	}
	for (let i1 = 0; i1 < c_gtfs["stop_times"].length; i1++) {
		c_trip_index[c_gtfs["stop_times"][i1]["trip_id"]]["stop_times"].push(c_gtfs["stop_times"][i1]);
	}
	for (const c_trip_id in c_trip_index) {
		c_trip_index[c_trip_id]["stop_times"].sort(f_sort_stop_time);
	}
	function f_sort_stop_time(a1, a2) {
		return (a1["stop_sequence"] - a2["stop_sequence"]);
	}
	
	// ur_routeで集計
	const c_ur_route_index = {};
	for (const c_trip_id in c_trip_index) {
		let l_ur_route_id = c_trip_index[c_trip_id]["route_id"] + "_" + c_trip_index[c_trip_id]["shape_id"];
		for (let i2 = 0; i2 < c_trip_index[c_trip_id]["stop_times"].length; i2++) {
			l_ur_route_id += "_" + c_trip_index[c_trip_id]["stop_times"][i2]["stop_id"] + "_" + c_trip_index[c_trip_id]["stop_times"][i2]["pickup_type"] + "_" + c_trip_index[c_trip_id]["stop_times"][i2]["drop_off_type"];
		}
		if (c_ur_route_index[l_ur_route_id] === undefined) {
			c_ur_route_index[l_ur_route_id] = {"route_id": c_trip_index[c_trip_id]["route_id"], "shape_id": c_trip_index[c_trip_id]["shape_id"], "trip_ids": [], "services": {}, "monday": 0, "tuesday": 0, "wednesday": 0, "thursday": 0, "friday": 0, "saturday": 0, "sunday": 0};
		}
		if (c_ur_route_index[l_ur_route_id]["services"][c_trip_index[c_trip_id]["service_id"]] === undefined) {
			c_ur_route_index[l_ur_route_id]["services"][c_trip_index[c_trip_id]["service_id"]] = 0;
		}
		c_ur_route_index[l_ur_route_id]["trip_ids"].push(c_trip_id);
		c_ur_route_index[l_ur_route_id]["services"][c_trip_index[c_trip_id]["service_id"]] += 1;
	}
	
	const c_day_of_week = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"];
	for (const c_ur_route_id in c_ur_route_index) {
		for (const c_service_id in c_ur_route_index[c_ur_route_id]["services"]) {
			if (c_service_index[c_service_id] === undefined) {
				continue;
			}
			for (let i3 = 0; i3 < c_day_of_week.length; i3++) {
				if (c_service_index[c_service_id][c_day_of_week[i3]] === "1") {
					c_ur_route_index[c_ur_route_id][c_day_of_week[i3]] += c_ur_route_index[c_ur_route_id]["services"][c_service_id];
				}
			}
		}
	}
	
	
	// shapes.txtの整理
	const c_shape_index = {};
	for (let i1 = 0; i1 < c_gtfs["shapes"].length; i1++) {
		if (c_shape_index[c_gtfs["shapes"][i1]["shape_id"]] === undefined) {
			c_shape_index[c_gtfs["shapes"][i1]["shape_id"]] = {"shapes": []};
		}
		c_shape_index[c_gtfs["shapes"][i1]["shape_id"]]["shapes"].push(c_gtfs["shapes"][i1]);
	}
	for (const c_shape_id in c_shape_index) {
		c_shape_index[c_shape_id]["shapes"].sort(f_sort_shape);
	}
	function f_sort_shape(a1, a2) {
		return (a1["shape_pt_sequence"] - a2["shape_pt_sequence"]);
	}
	
	
	// GeoJSON出力
	const c_geojson = {"type": "FeatureCollection", "features": []};
	for (const c_ur_route_id in c_ur_route_index) {
		const c_coordinates = [];
		const c_shape_id = c_ur_route_index[c_ur_route_id]["shape_id"];
		const c_route_id = c_ur_route_index[c_ur_route_id]["route_id"];
		for (let i2 = 0; i2 < c_shape_index[c_shape_id]["shapes"].length; i2++) {
			c_coordinates.push([c_shape_index[c_shape_id]["shapes"][i2]["shape_pt_lon"], c_shape_index[c_shape_id]["shapes"][i2]["shape_pt_lat"]]);
		}
		const c_feature = {
			"type": "Feature",
			"geometry": {
				"type": "LineString",
				"coordinates": c_coordinates
			},
			"properties": {
				"trip_ids": c_ur_route_index[c_ur_route_id]["trip_ids"],
				"services": c_ur_route_index[c_ur_route_id]["services"]
			}
		};
		for (let i2 = 0; i2 < c_route_field_names.length; i2++) {
			c_feature["properties"][c_route_field_names[i2]] = c_route_index[c_route_id][c_route_field_names[i2]];
		}
		for (let i2 = 0; i2 < c_day_of_week.length; i2++) {
			c_feature["properties"][c_day_of_week[i2]] = c_ur_route_index[c_ur_route_id][c_day_of_week[i2]];
		}
		
		c_geojson["features"].push(c_feature);
	}
	
	
	const c_text = JSON.stringify(c_geojson);
	const c_blob = new Blob([c_text],{type:"text/plain"});
	const c_a = document.createElement("a");
	c_a.href = URL.createObjectURL(c_blob);
	c_a.download = "ur_routes.geojson";
	c_a.click();
	
}


		//]]>
		</script>
	</body>
</html>
